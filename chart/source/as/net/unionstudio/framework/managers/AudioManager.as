package net.unionstudio.framework.managers {		import flash.events.EventDispatcher;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.media.SoundMixer;	import flash.net.URLRequest;	import flash.errors.IllegalOperationError;	import flash.events.*;		import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import net.unionstudio.framework.*;	import lt.uza.utils.*;			public class AudioManager extends EventDispatcher {				// **************************************************************		//		// PRIVATE VARS		//		// **************************************************************				//Singletons n' Statics!//		private static var global:Global = Global.getInstance();				//instance of this class for use as singleton//		private static var instance:AudioManager = new AudioManager();				private var _soundRequest:URLRequest;		private static var _soundChannel:SoundChannel;		private static var _slChannel:SoundChannel;		private static var _soundTransform:SoundTransform;		private static var _isMute:Boolean = false;				private var _globalSound:Sound;		private var _pausePoint:Number = 0.00;		private var _isPause:Boolean = false;		private static var _soundList:Array = new Array();		private static var _singleSounds:Array = new Array();		private static var _section:String;					// **************************************************************		//		// PUBLIC VARS / PROPERTIES		//		// **************************************************************				//transform needs to be accessable to control volume/pan//		public var _transformer:SoundTransform;						///////////////		//constructor//		///////////////		public function AudioManager():void {					if( instance ) throw new IllegalOperationError( "Dude! No more instances! AudioManager and can only be accessed through AudioManager.getInstance()" );					 /////////////////// 			}//end constructor//		 ///////////////////						// **************************************************************		//		// PUBLIC METHODS		//		// **************************************************************						////////////////		//get instance//		////////////////				//---------------------------------------------------------------//			public static function getInstance():AudioManager {		//---------------------------------------------------------------//			    		return instance;		}								//---------------------------------------------------------------//			public function playSoundTraditional($snd:Sound, $loop:Number=0):void {		//---------------------------------------------------------------//			     		    var loop = $loop;					(!_soundChannel) ? _soundChannel = new SoundChannel() : null;			if (!_soundTransform) {								trace("making transform");								_soundTransform = new SoundTransform(1, 0);			} 			_soundChannel.soundTransform = _soundTransform;			_soundChannel = $snd.play(0, loop);			_soundChannel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);					}						//---------------------------------------------------------------//			public function playSoundOnce($snd:Sound, $loop:Number = 0, $vol:Number=1, $section:String = null):void {		//---------------------------------------------------------------//						trace("*** playSoundOnce: "+$snd+" "+$section);					var trans:SoundTransform = new SoundTransform($vol, 0)			_slChannel = new SoundChannel();			_slChannel.soundTransform = trans;			_section = $section;			_slChannel = $snd.play(0, $loop);			_slChannel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);									_singleSounds.push({tr:trans, sc:_slChannel, snd:$snd});			trace(_singleSounds);					}				//---------------------------------------------------------------//			public function stopSingleSounds():void {		//---------------------------------------------------------------//						trace("*** stopSingleSounds() array: "+_singleSounds);					for each(var obj:Object in _singleSounds) {								TweenMax.to(obj.tr, 1, {volume: 0, onUpdate: function() { obj.sc.soundTransform = obj.tr; }});								//obj.sc.stop();				//_singleSounds.shift();							}					}						//---------------------------------------------------------------//			public function stopSoundTraditional($fadeOut:Number = 0):void {		//---------------------------------------------------------------//					    trace("*******STOP SOUND********");					(!_soundTransform) ? _soundTransform = new SoundTransform() : null;			if ($fadeOut) {								trace("fade out------");								TweenMax.killTweensOf(_soundTransform);				TweenMax.to(_soundTransform, $fadeOut, {volume: 0, onUpdate: function() { _soundChannel.soundTransform = _soundTransform; }, onComplete: function() { _soundChannel.stop(); }});			} else {				_soundChannel.stop();			}						}				//---------------------------------------------------------------//			public function mute($fadeOut:Number = 0):void {		//---------------------------------------------------------------//						trace("muting");			(!_soundTransform) ? _soundTransform = new SoundTransform() : null;			if ($fadeOut) {				TweenMax.killTweensOf(_soundTransform);				TweenMax.to(_soundTransform, $fadeOut, {volume: 0, onUpdate: function() { SoundMixer.soundTransform = _soundTransform; }});			} else {				_soundTransform.volume = 0;				SoundMixer.soundTransform = _soundTransform;			}			_isMute = true;					}				//---------------------------------------------------------------//			public function unmute($fadeIn:Number = 0):void {		//---------------------------------------------------------------//						(!_soundTransform) ? _soundTransform = new SoundTransform() : null;			if ($fadeIn) {				TweenMax.killTweensOf(_soundTransform);				TweenMax.to(_soundTransform, $fadeIn, {volume: 1, onUpdate: function() { SoundMixer.soundTransform = _soundTransform; }});			} else {				_soundTransform.volume = 1;			}			SoundMixer.soundTransform = _soundTransform;			_isMute = false;					}				//---------------------------------------------------------------//			public function  stopSound($fadeIn:Number = 0):void {		//---------------------------------------------------------------//						(!_soundTransform) ? _soundTransform = new SoundTransform() : null;										TweenMax.killTweensOf(_soundTransform);						TweenMax.to(_soundTransform, 1.0, {volume: 0, onUpdate: function() { _soundChannel.soundTransform = _soundTransform; }, onComplete: function() { _soundChannel.stop(); }});							//_soundTransform.volume = 0;			//_soundChannel.soundTransform = _soundTransform;						_soundChannel.removeEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);		   // _soundChannel.stop();					}										//---------------------------------------------------------------//			public static function get muteState():Boolean {		//---------------------------------------------------------------//						return _isMute;					}				//---------------------------------------------------------------//			public function loadAudio($path:String, $loop:Boolean = false):void {		//---------------------------------------------------------------//					     global._isLoop = $loop;					_soundRequest = new URLRequest($path); 						_globalSound = new Sound(_soundRequest);						_transformer = new SoundTransform();						_globalSound.addEventListener(Event.COMPLETE, soundLoadHandler);			_globalSound.addEventListener(IOErrorEvent.IO_ERROR, loadErrorHandler);				}								// **************************************************************		//		// EVENT HANDLERS		//		// **************************************************************				//---------------------------------------------------------------//			private static function soundCompleteHandler($event:Event):void {		//---------------------------------------------------------------//						trace("sound completed and the identifier is : " + _section);						if (_soundChannel){								_soundChannel.removeEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);						}		}				//---------------------------------------------------------------//			private function soundLoadHandler($event:Event):void {		//---------------------------------------------------------------//						trace("sound loaded successfully");			playSoundTraditional(_globalSound);				}				//---------------------------------------------------------------//			private function loadErrorHandler($event:IOErrorEvent):void {		//---------------------------------------------------------------//						trace("LOAD ERROR : " + $event);					}			} //end class//	} //end package//