//**********************************************////        DATA IO CLASS     ////      BY GEOFFREY ANDERSON / UNION STUDIO     ////**********************************************//package net.unionstudio.framework.managers {		import flash.xml.*;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.errors.IllegalOperationError;	import flash.errors.IOError;	import flash.net.URLRequest;	import flash.net.URLLoader;	//	import lt.uza.utils.*;		public class DataIO extends EventDispatcher{			private var global:Global = Global.getInstance();			private static var instance:DataIO = new DataIO();		//    private var _xmlArray:Array;		private var _dataArray:Array = new Array();		private var _identifier:String;			public function DataIO() {				if( instance ) throw new IllegalOperationError( "DataIO and can only be accessed through DataIO.getInstance()" );			}		//get instance//	public static function getInstance():DataIO {		    	return instance;		}			public function init($data:Array):void {				_xmlArray = new Array();		_xmlArray = $data;		loadData();			}			private function loadData():void {				if (_xmlArray && _xmlArray.length > 0) {						var item:Object = _xmlArray.shift();				loadXML(item.path, item.name);						//trace("loading " + item.name + " at:" + global.dataRoot+item.path);					} else {						dispatchEvent(new Event("dataLoaded"));					}			}		public function loadXML($target:String, $name:String):void {				//trace("WTF");				//trace("DataIO/loadXML("+$target+", "+$name)+")";		_identifier = $name;		var loader:URLLoader = new URLLoader();		var req:URLRequest = new URLRequest($target);		loader.load(req);		loader.addEventListener(Event.COMPLETE, dataReceived);			}		public function getData($name:String):XML {				var returnData:XML;				for each(var item:Object in _dataArray) {						if(item._name == $name) {			returnData = item._data;			}		}         return returnData;	}		//EVENT HANDLERS//		private function dataReceived($event:Event):void {				var temp:XML = new XML($event.target.data);				_dataArray.push({_name:_identifier, _data:temp})				global.dataArray = _dataArray;				loadData();			}	}}