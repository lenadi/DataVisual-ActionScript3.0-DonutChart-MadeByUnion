package net.unionstudio.whodo {    import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.external.ExternalInterface;	import flash.filters.DropShadowFilter;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLLoaderDataFormat;	import flash.net.URLVariables;		import lt.uza.utils.*;		import com.greensock.*; 	import com.greensock.easing.*;		import net.unionstudio.framework.managers.*;	import net.unionstudio.utils.GetFlashVars;		import com.adobe.serialization.json.JSON; 	import nl.demonsters.debugger.MonsterDebugger;	public class Main extends Sprite {				//singletons//		private var dataIO:DataIO = DataIO.getInstance();		private var global:Global = Global.getInstance();				protected var DEBUG:Boolean = false;				private var debugger:MonsterDebugger;						//---------------------------------------------------------------//			public function Main() { 		//---------------------------------------------------------------//	            debugger = new MonsterDebugger(this);     				 		    global.base = this;			global.debug = DEBUG;									DEBUG = false;						if (DEBUG) {								global.dataRoot = "../data/";				global.mediaRoot = "../media/";				global.videoRoot = "../"+global.mediaRoot;				global.swfRoot = "../swf/";				 			} else {								getFV();						}						loadMain();					};				//---------------------------------------------------------------//		protected function getFV():void {		//---------------------------------------------------------------//									var fvRef:GetFlashVars = new GetFlashVars(this);				 			if (fvRef.flashVars.mediaRoot) {								// assume we are in the browser and have FlashVars				global.dataRoot = fvRef.flashVars.dataRoot;				global.mediaRoot = fvRef.flashVars.mediaRoot;				global.swfRoot = fvRef.flashVars.swfRoot;				global.videoRoot = "../"+global.mediaRoot;				global.color = fvRef.flashVars.color;				global.popupColor = fvRef.flashVars.popupColor;				global.bgColor = fvRef.flashVars.bgColor;							} else {								// assume we are in the IDE				global.dataRoot = "../../deploy/data/chartdata.txt";				global.mediaRoot = "../../deploy/media/";				global.swfRoot = "../../deploy/swf/";				global.videoRoot = global.mediaRoot;							}					};						//----------------------------------------------------------- ----//			protected function loadMain():void {		//---------------------------------------------------------------//							trace("START TO LOAD XML")									var urlRequest:URLRequest = new URLRequest(global.dataRoot);						var loader:URLLoader = new URLLoader();			loader.addEventListener(Event.COMPLETE, loadedData);			loader.load(urlRequest);						if (global.color) {								global.baseColor = uint(global.color);							} else {								global.baseColor = uint(0x268892);			}						if (global.popupColor) {								global.bgPopupColor = global.popupColor;							} else {								global.bgPopupColor =  uint(0xE8E8E8);			}						if (global.bgColor) {								global.bgColor = global.bgColor;							} else {								global.bgColor =  uint(0xE8E8E8);			}						MonsterDebugger.trace(this, urlRequest)		};						//---------------------------------------------------------------//				private function loadedData($event:Event):void {		//---------------------------------------------------------------//			   		   trace("**************XML DATA LOAD COMPLETE************");		 				   global.chartXML = $event.target.data;				   if (global.chartXML) {			   init(global.chartXML);   		   }		   		};						//-----------------------------------------------------------//		private function init(chartData:String):void {		//-----------------------------------------------------------//				   var dataObj:Array = JSON.decode(chartData);				   var projects:Array = new Array();		   var objectsArray:Array = new Array();		   		   var wholeObject:Object = Object(dataObj[0]);		   		  		   for each(var internal_data:Object in wholeObject) {			   					      var currentObject:Object = {};			  				if ((internal_data.name) && (internal_data.numPeople) && (internal_data.listOfPeople)) { 				    currentObject.name = String(internal_data.name);					currentObject.numPeople = String(internal_data.numPeople);					currentObject.listOfPeople =  Object(internal_data.listOfPeople);					  					objectsArray.push(currentObject);				}						   }				 		   				 		   drawChart(objectsArray);					}		//---------------------------------------------------------//		private function drawChart(array:Array):void {        //---------------------------------------------------------//			var chart:PieChart = new PieChart(array);						chart.x = 240;			chart.y = 190;						TweenMax.from(chart, 0.7, {alpha:0});						addChild(chart);		}		}	}