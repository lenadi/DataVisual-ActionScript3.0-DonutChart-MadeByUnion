package net.unionstudio.whodo {    import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.ProgressEvent;    import flash.geom.Point;	import flash.events.*;		import lt.uza.utils.*;		import net.unionstudio.framework.managers.*;	import net.unionstudio.utils.GetFlashVars;		import com.greensock.*; 	import com.greensock.easing.*;	import com.greensock.plugins.*;		    TweenPlugin.activate([ColorMatrixFilterPlugin, EndArrayPlugin]);		public class PieChart extends Sprite {						private var dataIO:DataIO = DataIO.getInstance();		private var global:Global = Global.getInstance();				private var _dataArray:Array = new Array();		private var _piecesArray:Array = new Array();		private var _mcPieSlices:Array = new Array();		private var popUp:PopUp;		private var _pieHolder:Sprite;		private var _sliceCount:int = 0; 		private var _mask:Sprite;						private var radiusOffset:Number = 10;				private var _maskCount:Number=-90;				public function PieChart(dataArray:Array) {						trace("*******************PIE CHART**************")						_dataArray = dataArray;									addEventListener(Event.ADDED_TO_STAGE, addToStage); 								}						  private function addToStage($event:Event):void {			   			   removeEventListener(Event.ADDED_TO_STAGE, addToStage);			   init();		   }		   		   		private function init():void {						for (var i:int=0; i<_dataArray.length; i++) {								var piece:Object = _dataArray[i];				_piecesArray.push(piece);							}						convertPointsToPercents();								}						//----------------------------------------------//		private function convertPointsToPercents():void {		//----------------------------------------------//				var sum:Number = 0;									for (var i:int=0; i<_piecesArray.length; i++) {								sum += Number(_piecesArray[i].numPeople);							}			            if (sum > 0) {			   for (var j:int=0; j<_piecesArray.length; j++) {					_piecesArray[j].percent = Number((_piecesArray[j].numPeople * 100)/sum)				}			} 									sortChart();		}				private function sortChart():void {						_piecesArray.sortOn("percent",  Array.DESCENDING|Array.NUMERIC);						_pieHolder = new Sprite();			_pieHolder.x = 0;			_pieHolder.y = 0;			addChild(_pieHolder);						_mask = new Sprite();			_mask.graphics.beginFill(0x00FF00);			addChild(_mask);			_mask.mouseEnabled = false;						this.mask = _mask;						drawChart();						var pieMask:PieMask = new PieMask();			addChild(pieMask);					    _pieHolder.mask = pieMask;		    			pieMask.cacheAsBitmap = true;			_pieHolder.cacheAsBitmap = true;					    var disableCircle:DisableCircle = new DisableCircle();			_pieHolder.addChild(disableCircle);						assignMouseListeners();								} 						private function drawChart():void {						for (var i:int=0; i<_piecesArray.length; i++) {										if (i==0) {								        var pie_slice_first:PieSlice = new PieSlice(_piecesArray[i].name, 0, _piecesArray[i].percent, _piecesArray[i].listOfPeople, i, _piecesArray.length);					pie_slice_first.name = _piecesArray[i].name;			        _pieHolder.addChild(pie_slice_first);					_mcPieSlices.push(pie_slice_first);									} else  {									    var startPoint:Number = getStartPoint(i);					var pie_slice:PieSlice = new PieSlice(_piecesArray[i].name, startPoint, _piecesArray[i].percent, _piecesArray[i].listOfPeople, i, _piecesArray.length);					 pie_slice.name = _piecesArray[i].name;			        _pieHolder.addChild(pie_slice);					_mcPieSlices.push(pie_slice)														}							}						addMaskMove();				}												private function getStartPoint(count:int):Number {								var point:Number = 0;						while (count > 0) {								point = point + Number(_piecesArray[count-1].percent);				count--;							}							return point;					}						//--------------------------------------------//		private function assignMouseListeners():void {		//-------------------------------------------//				    for (var i:int=0; i<_mcPieSlices.length; i++) {				_mcPieSlices[i].buttonMode = true;				_mcPieSlices[i].mouseChildren = false;				_mcPieSlices[i].addEventListener(MouseEvent.ROLL_OVER, onMouseOverSlice);				_mcPieSlices[i].addEventListener(MouseEvent.ROLL_OUT, onMouseOutSlice);				_mcPieSlices[i].addEventListener(MouseEvent.CLICK, onMouseClick);			}		}						//-----------------------------------------------------------//		private function onMouseOverSlice($event:MouseEvent):void {		//-----------------------------------------------------------//		    			TweenMax.to($event.currentTarget.bg, 0.5, {tint:global.baseColor, alpha:0.9});		   					}						//---------------------------------------------------------//		private function onMouseOutSlice($event:MouseEvent):void {		//----------------------------------------------------------//		    TweenMax.to($event.currentTarget.bg, 0.5, {removeTint:true, alpha:1});		}								//---------------------------------------------------------//		private function onMouseClick($event:MouseEvent):void {		//----------------------------------------------------------//		     destroyPopUpWindow();				     var infoObj:Object=Object($event.currentTarget._info);           			 var str:String = String($event.currentTarget.name);						 createPopUpWindow(str,infoObj);		  		}								//----------------------------------------------------------//		private function createPopUpWindow(str:String, infoObj:Object):void {	    //---------------------------------------------------------//		 			popUp = new PopUp(str, infoObj);			popUp.x = 235;			popUp.y = -140;			addChild(popUp);						TweenMax.from(popUp, 0.3, {alpha:0});			 		}				//---------------------------------------------------------//		private function destroyPopUpWindow():void {		//---------------------------------------------------------//		  		     if (popUp) { removeChild(popUp);}				}								private function addMaskMove():void {						_mask.graphics.beginFill(0x00FF00);									 addEventListener(Event.ENTER_FRAME, revealMask);								}				private function revealMask($event:Event):void {			var _centerX:Number = 0;			var _centerY:Number = 0;			var _radius:Number = stage.stageWidth;						if (_maskCount <= 280) {								var max:Number = 280;								if (_maskCount < max) {															 var _x:Number = _centerX + Math.cos((_maskCount)*Math.PI/180) * _radius;			         var _y:Number = _centerY + Math.sin((_maskCount)*Math.PI/180) * _radius;			         								         _mask.graphics.lineTo(_x, _y);					 _maskCount += (max - _maskCount) * 0.05;									}						   if (_maskCount > 271) {				   				   removeEventListener(Event.ENTER_FRAME, revealMask);				   				   for each (var object in _mcPieSlices) {					   object.drawMainDesc();   				   }				   				   var infoObj:Object=Object(_mcPieSlices[0]._info);           			       var str:String = String(_mcPieSlices[0].name);						       TweenMax.delayedCall(0.2, function() { createPopUpWindow(str,infoObj)});				   			   }										} else {								  removeEventListener(Event.ENTER_FRAME, revealMask);			}		}	}}	