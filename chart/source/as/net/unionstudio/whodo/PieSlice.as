package net.unionstudio.whodo {    import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.ProgressEvent;    import flash.geom.Point;	import flash.display.LineScaleMode;	import flash.display.CapsStyle;	import flash.display.JointStyle;	import flash.text.TextField;	import flash.text.Font;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.text.AntiAliasType;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.geom.PerspectiveProjection;	import flash.geom.Matrix;	import flash.display.GradientType;	import flash.display.SpreadMethod;		import lt.uza.utils.*;		import net.unionstudio.framework.managers.*;	import net.unionstudio.utils.GetFlashVars;		import com.greensock.*; 	import com.greensock.easing.*;		public class PieSlice extends Sprite {				//singletons//		private var dataIO:DataIO = DataIO.getInstance();		private var global:Global = Global.getInstance();				private var _centerX:Number = 0;		private var _centerY:Number = 0;		private var _radius:Number = 115;		private var _start_angle:Number;// = -90;		private var _end_angle:Number;				private var __angle:Number;		private var spr:Sprite;		public var bg:Sprite;		private var line_one:Sprite;		private var line_two:Sprite;				private var _startPoint:Point = new Point(0, 0);		private var _angle:Number;		private var _color:uint;		public var _info:Object;		private var _name:String;		private var _center_angle:Number;		private var _mask:Sprite; 		private var _endColor:uint;		private var _sliceCount:Number;		private var radiusOffset:Number = 10;				private var _maskCount:Number=-90;		private var _totalSlices:int;		private var h_offset:Number;						public var midAngle:Number;				//--------------------------------------------------------------------------------------------------------------------------//			public function PieSlice(name:String, startPercent:Number, percent:Number, info:Object, sliceCount:Number, totalSlices:int) { 		//--------------------------------------------------------------------------------------------------------------------------//	                 		    trace("*********************PIE SLICE************************") 						_start_angle = 0;						_end_angle = 0;						_start_angle = -90 + ((360 * startPercent)/100);						_angle = _start_angle;						_end_angle = (360 * percent)/100;						_name = name;						_sliceCount = sliceCount;						_totalSlices = totalSlices;						 var baseColor:uint = global.baseColor;						if (_sliceCount > 0) {						     _color = getNewColor(baseColor);				 			} else {								_color = baseColor;			}						var holder:Sprite = new Sprite();			addChild(holder);						bg = new Sprite();			bg.graphics.beginFill(global.bgColor);			holder.addChild(bg); 			      			spr = new Sprite();			spr.graphics.beginFill(_color);			holder.addChild(spr); 						line_one = new Sprite();			line_one.graphics.lineStyle(0.5, 0xE8E8E8, 0.2);			holder.addChild(line_one); 						line_two = new Sprite();			line_two.graphics.lineStyle(0.5, 0xE8E8E8, 0.2);			holder.addChild(line_two); 						var firstPointBgX:Number = _centerX + Math.cos((_start_angle)*Math.PI/180) * (_radius+radiusOffset);			var firstPointBgY:Number = _centerY + Math.sin((_start_angle)*Math.PI/180) *(_radius+radiusOffset);						var firstPoint_endX:Number = _centerX + Math.cos((_start_angle)*Math.PI/180) * _radius;			var firstPoint_endY:Number = _centerY + Math.sin((_start_angle)*Math.PI/180) * _radius;						bg.graphics.moveTo(_startPoint.x, _startPoint.y);		    bg.graphics.lineTo(firstPointBgX, firstPointBgY);									spr.graphics.moveTo(_startPoint.x, _startPoint.y);			spr.graphics.lineTo(firstPoint_endX,firstPoint_endY);						var firstPointLineOneX:Number = _centerX + Math.cos((_start_angle)*Math.PI/180) * (_radius/2+radiusOffset+5);			var firstPointLineOneY:Number = _centerY + Math.sin((_start_angle)*Math.PI/180) *(_radius/2+radiusOffset+5);						var firstPointLineTwoX:Number = _centerX + Math.cos((_start_angle)*Math.PI/180) * (_radius/2+radiusOffset+35);			var firstPointLineTwoY:Number = _centerY + Math.sin((_start_angle)*Math.PI/180) *(_radius/2+radiusOffset+35);						line_one.graphics.moveTo(firstPointLineOneX, firstPointLineOneY);			line_two.graphics.moveTo(firstPointLineTwoX, firstPointLineTwoY);										var temp:Number = _start_angle + _end_angle;			_end_angle = temp;							if (_end_angle < _start_angle) {				 _end_angle += _start_angle;			}					 		     _info = Object(info);			 			 			 addPiece();								}						private function addPiece():void {					     if (_angle <= _end_angle) {				 				 for (var i:int=_angle; i<=_end_angle; i++) {					 					 			        var curve_x:Number = _centerX+ Math.cos((i)*Math.PI/180) * (_radius);			        var curve_y:Number = _centerY + Math.sin((i)*Math.PI/180) * (_radius);										var curve_bg_x:Number = _centerX + Math.cos((i)*Math.PI/180) * (_radius+radiusOffset);			        var curve_bg_y:Number = _centerY + Math.sin((i)*Math.PI/180) * (_radius+radiusOffset);										var curve_lineone_x:Number = _centerX + Math.cos((i)*Math.PI/180) * (_radius/2+radiusOffset+5);			        var curve_lineone_y:Number = _centerY + Math.sin((i)*Math.PI/180) * (_radius/2+radiusOffset+5);										var curve_linetwo_x:Number = _centerX + Math.cos((i)*Math.PI/180) * (_radius/2+radiusOffset+35);			        var curve_linetwo_y:Number = _centerY + Math.sin((i)*Math.PI/180) * (_radius/2+radiusOffset+35);									    spr.graphics.lineTo(curve_x, curve_y);					bg.graphics.lineTo(curve_bg_x, curve_bg_y);					line_one.graphics.lineTo(curve_lineone_x, curve_lineone_y);					line_two.graphics.lineTo(curve_linetwo_x, curve_linetwo_y);							         }							     var final_x:Number = _centerX + Math.cos((_end_angle)*Math.PI/180) * _radius;			     var final_y:Number = _centerY + Math.sin((_end_angle)*Math.PI/180) * _radius;				 				 var final_bg_x:Number = _centerX + Math.cos((_end_angle)*Math.PI/180) * (_radius+radiusOffset);			     var final_bg_y:Number = _centerY + Math.sin((_end_angle)*Math.PI/180) * (_radius+radiusOffset);				 				 var final_lineone_x:Number = _centerX + Math.cos((_end_angle)*Math.PI/180) * (_radius/2+radiusOffset+5);			     var final_lineone_y:Number = _centerY + Math.sin((_end_angle)*Math.PI/180) * (_radius/2+radiusOffset+5);				 				 var final_linetwo_x:Number = _centerX + Math.cos((_end_angle)*Math.PI/180) * (_radius/2+radiusOffset+35);			     var final_linetwo_y:Number = _centerY + Math.sin((_end_angle)*Math.PI/180) * (_radius/2+radiusOffset+35);				   				 bg.graphics.lineTo(final_bg_x, final_bg_y);			     bg.graphics.lineTo(0, 0);				   			     spr.graphics.lineTo(final_x, final_y);			     spr.graphics.lineTo(0, 0);				 				 line_one.graphics.lineTo(final_lineone_x, final_lineone_y);				 line_two.graphics.lineTo(final_linetwo_x, final_linetwo_y);				 											} 		}				//------------------------------------//		public function drawMainDesc():void {		//-----------------------------------//					    var txtName:TextField = makeTextField(_name, "bold");		   			var lineOffset:Number = 20;			var nameOffset:Number =lineOffset+2;						_center_angle = _start_angle + (_end_angle-_start_angle)/2;						 midAngle = _center_angle;		   		    var start_center_x:Number = _centerX + Math.cos((_center_angle)*Math.PI/180) * (_radius/2 + _radius/3);			var start_center_y:Number = _centerY + Math.sin((_center_angle)*Math.PI/180) * (_radius/2 + _radius/3);						var center_x:Number;			var center_y:Number;			trace(_end_angle-_start_angle)						if ((_end_angle-_start_angle) < 10) {												} else {								if ((_end_angle-_start_angle) < 15) {				    h_offset  = _radius * getPercent(_sliceCount) + 50;				} else {					h_offset = _radius + 20;				}								center_x= _centerX + Math.cos((_center_angle)*Math.PI/180) * (h_offset);			    center_y= _centerY + Math.sin((_center_angle)*Math.PI/180) * (h_offset);								var descHolder:Sprite = new Sprite();			    descHolder.alpha =0;			    addChild(descHolder);								    var line:Sprite=new Sprite();			    line.graphics.lineStyle(0.5, 0xA7A7A7, 0.6, true, LineScaleMode.NORMAL, CapsStyle.ROUND, JointStyle.ROUND);			    line.graphics.moveTo(start_center_x, start_center_y);			    line.graphics.lineTo(center_x, center_y);												    txtName.y = (center_y - txtName.height/2) ;						    if (_center_angle < 0) {				    line.graphics.lineTo(center_x+lineOffset/2, center_y);				    txtName.x = center_x+lineOffset/2;							    } else 						    if (_center_angle>=0 && _center_angle<90) {				    line.graphics.lineTo(center_x+lineOffset/2, center_y);				    txtName.x = center_x+lineOffset/2;			    } else 						    if (_center_angle>=90 && _center_angle<180) {				    line.graphics.lineTo(center_x-lineOffset/2, center_y);				    txtName.x = center_x-txtName.width-lineOffset/2-2;			    } else 						    if (_center_angle>=180 && _center_angle<270) {				    line.graphics.lineTo(center_x-lineOffset/2, center_y);				    txtName.x = center_x-txtName.width-lineOffset/2-2;			    } 									    descHolder.addChild(line);			  			    descHolder.addChild(txtName);						    TweenMax.to(descHolder, 1.0, {alpha:1.0, delay:0.2});											}					}						//-----------------------------------------------------------//		private function makeTextField(str:String, fontWeigth:String):TextField {		//----------------------------------------------------------//				     var _textField:TextField = new TextField();						 _textField.type = TextFieldType.DYNAMIC;			 _textField.autoSize = TextFieldAutoSize.LEFT; 						 _textField.multiline = true;			 _textField.wordWrap = true;			 _textField.selectable = false;			 			 _textField.width = 100;						 _textField.antiAliasType = AntiAliasType.ADVANCED;			 _textField.embedFonts = true;			 						 var _textFormat:TextFormat = new TextFormat();			 _textFormat.color = 0x464646;			 _textFormat.size = 12;			 _textFormat.align = "center";			 			 if (fontWeigth == "bold") {			 			     var fontBold:Font = new HelveticaBold();			     _textFormat.font = fontBold.fontName;				 			 } else {				  var font:Font = new Helvetica();			     _textFormat.font = font.fontName;			 }			 			 			 _textField.setTextFormat(_textFormat);			 _textField.defaultTextFormat = _textFormat;									 _textField.htmlText = str;			 			 			 return _textField;			  		}						private function getNewColor(startColor:uint):uint {						var endColor:uint = 0xE8E8E8;			var percent:Number = getPercent(_sliceCount);							var startRed:uint = startColor >> 16 & 0xFF;			var startGreen:uint = startColor >> 8 & 0xFF;			var startBlue:uint = startColor & 0xFF;						var endRed:uint = endColor >> 16 & 0xFF;			var endGreen:uint = endColor >> 8 & 0xFF;			var endBlue:uint = endColor & 0xFF;						var red:uint = (endRed - startRed)*percent + startRed;			var green:uint = (endGreen - startGreen)*percent + startGreen;			var blue:uint = (endBlue - startBlue)*percent + startBlue;						return red << 16 | green << 8 | blue;								}				private function getPercent(index:uint):Number {			return (index+1)/(_totalSlices+1);		}	}}